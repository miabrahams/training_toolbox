import os
import numpy as np
from pathlib import Path

class TagAnalysisData:
    """Container for analysis results generated by TagAnalyzer"""
    embeddings: np.ndarray
    reduced_embeddings: np.ndarray
    clusters: np.ndarray
    data_dir: Path

    def __init__(self, embeddings: np.ndarray, reduced_embeddings: np.ndarray, clusters: np.ndarray, data_dir: Path):
        self.embeddings = embeddings
        self.reduced_embeddings = reduced_embeddings
        self.clusters = clusters
        self.data_dir = data_dir


    @staticmethod
    def load_analysis_data(data_dir: Path):
        """Load embeddings, reduced embeddings, and clusters from disk if available."""
        embedding_path = data_dir / 'embeddings.npy'
        reduced_path = data_dir / 'reduced_embeddings.npy'
        clusters_path = data_dir / 'clusters.npy'
        prompts_path = data_dir / 'prompt_texts.pkl'

        # Check if all files exist
        if all(os.path.exists(p) for p in [embedding_path, reduced_path, clusters_path, prompts_path]):
            print("Loading existing analysis data...")
            embeddings = np.load(embedding_path)
            reduced_embeddings = np.load(reduced_path)
            clusters = np.load(clusters_path)

            return TagAnalysisData(embeddings, reduced_embeddings, clusters, data_dir)

        return None


    def _save_analysis_data(self):
        """Save embeddings, reduced embeddings, and clusters to disk."""
        os.makedirs(self.data_dir, exist_ok=True)

        # Save the data
        np.save(self.data_dir / 'embeddings.npy', self.embeddings)
        np.save(self.data_dir / 'reduced_embeddings.npy', self.reduced_embeddings)
        np.save(self.data_dir / 'clusters.npy', self.clusters)

        print(f"Analysis data saved to {self.data_dir}")


