import os
import numpy as np
from pathlib import Path
import pickle

class TagAnalysisData:
    """Container for analysis results generated by TagAnalyzer"""
    embeddings: np.ndarray
    reduced_embeddings: np.ndarray
    clusters: np.ndarray
    data_dir: Path

    def __init__(self, embeddings: np.ndarray, reduced_embeddings: np.ndarray, clusters: np.ndarray, data_dir: Path):
        self.embeddings = embeddings
        self.reduced_embeddings = reduced_embeddings
        self.clusters = clusters
        self.data_dir = data_dir if data_dir else Path("data")


    @staticmethod
    def load_analysis_data(data_dir: Path):
        """Load embeddings, reduced embeddings, and clusters from disk if available."""
        embedding_path = data_dir / 'embeddings.pkl'
        reduced_path = data_dir / 'reduced_embeddings.pkl'
        clusters_path = data_dir / 'clusters.pkl'

        # Check if all files exist
        if all(os.path.exists(p) for p in [embedding_path, reduced_path, clusters_path]):
            print("Loading existing analysis data...")
            try:
                with open(embedding_path, "rb") as f:
                    embeddings = pickle.load(f)
                with open(reduced_path, "rb") as f:
                    reduced_embeddings = pickle.load(f)
                with open(clusters_path, "rb") as f:
                    clusters = pickle.load(f)

                return TagAnalysisData(embeddings, reduced_embeddings, clusters, data_dir)
            except Exception as e:
                print(f"Error loading analysis data: {e}")
                return None

        return None


    def _save_analysis_data(self):
        """Save embeddings, reduced embeddings, and clusters to disk."""
        os.makedirs(self.data_dir, exist_ok=True)

        # Save the data
        if self.embeddings is not None:
            with open(self.data_dir / "embeddings.pkl", "wb") as f:
                pickle.dump(self.embeddings, f)
        if self.reduced_embeddings is not None:
            with open(self.data_dir / "reduced_embeddings.pkl", "wb") as f:
                pickle.dump(self.reduced_embeddings, f)
        if self.clusters is not None:
            with open(self.data_dir / "clusters.pkl", "wb") as f:
                pickle.dump(self.clusters, f)

        print(f"Analysis data saved to {self.data_dir}")


