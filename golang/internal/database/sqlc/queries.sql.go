// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package prompts

import (
	"context"
)

const getPromptByPath = `-- name: GetPromptByPath :one
SELECT file_path, prompt, workflow FROM prompts
WHERE file_path = ?
`

func (q *Queries) GetPromptByPath(ctx context.Context, filePath string) (Prompt, error) {
	row := q.db.QueryRowContext(ctx, getPromptByPath, filePath)
	var i Prompt
	err := row.Scan(&i.FilePath, &i.Prompt, &i.Workflow)
	return i, err
}

const getTestPrompt = `-- name: GetTestPrompt :one
SELECT file_path, prompt, workflow FROM prompts
limit 1
`

func (q *Queries) GetTestPrompt(ctx context.Context) (Prompt, error) {
	row := q.db.QueryRowContext(ctx, getTestPrompt)
	var i Prompt
	err := row.Scan(&i.FilePath, &i.Prompt, &i.Workflow)
	return i, err
}

const listPrompts = `-- name: ListPrompts :many
SELECT file_path, prompt, workflow FROM prompts
`

func (q *Queries) ListPrompts(ctx context.Context) ([]Prompt, error) {
	rows, err := q.db.QueryContext(ctx, listPrompts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Prompt
	for rows.Next() {
		var i Prompt
		if err := rows.Scan(&i.FilePath, &i.Prompt, &i.Workflow); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
